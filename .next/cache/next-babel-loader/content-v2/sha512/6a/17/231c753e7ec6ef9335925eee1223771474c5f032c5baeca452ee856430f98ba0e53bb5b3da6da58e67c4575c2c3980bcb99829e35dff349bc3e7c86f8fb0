{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_PRODUCT_MUTATION(\\n    $id: ID!\\n    $name: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateProduct(\\n      id: $id\\n      data: { name: $name, description: $description, price: $price }\\n    ) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\\n    Product(where: { id: $id }) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1 We need to get the exitisng product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; //   console.log(data);\n  // 2 we need to get the mutation to update the product\n  // destruscting data variable into new variable called updateData\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; // 2.5 create some state for the form input\n  // our initial stage is initially empty until the loading can come in\n\n\n  var _useForm = useForm(data === null || data === void 0 ? void 0 : data.Product),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm; // 3 we need the form to handle the updates\n\n\n  console.log(inputs);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"I am loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 23\n  }, this);\n  return (\n    /*#__PURE__*/\n    // a field set is a way for you ro group multiple fields\n    _jsxDEV(Form // Todo handle submit\n    , {\n      onSubmit: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  //     // stop the form from putting the info the url\n                  e.preventDefault();\n                  _context.next = 3;\n                  return updateProduct({\n                    variables: {\n                      id: id,\n                      name: inputs.name,\n                      description: inputs.description,\n                      price: inputs.price\n                    }\n                  })[\"catch\"](console.error);\n\n                case 3:\n                  res = _context.sent;\n                  console.log(res);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n        error: error || updateError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        disabled: updateLoading,\n        \"aria-busy\": updateLoading,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Name\",\n            value: inputs.name,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"price\",\n            name: \"price\",\n            placeholder: \"Price\",\n            value: inputs.price,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Description\",\n            value: inputs.description,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product :>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(UpdateProduct, \"+ElilaJyMyeJ07NkHv6NMUicoTQ=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","Form","DisplayError","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","updateLoading","Product","inputs","handleChange","clearForm","resetForm","console","log","e","preventDefault","name","description","price","res"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: { name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateProduct({ id }) {\n  // 1 We need to get the exitisng product\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id,\n    },\n  });\n\n  //   console.log(data);\n\n  // 2 we need to get the mutation to update the product\n  // destruscting data variable into new variable called updateData\n\n  const [\n    updateProduct,\n    { data: updateData, error: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_PRODUCT_MUTATION);\n  // 2.5 create some state for the form input\n  // our initial stage is initially empty until the loading can come in\n  const { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product);\n\n  // 3 we need the form to handle the updates\n  console.log(inputs);\n  if (loading) return <p>I am loading</p>;\n\n  return (\n    // a field set is a way for you ro group multiple fields\n    <Form\n      // Todo handle submit\n      onSubmit={async (e) => {\n        //     // stop the form from putting the info the url\n        e.preventDefault();\n        const res = await updateProduct({\n          variables: {\n            id,\n\n            name: inputs.name,\n            description: inputs.description,\n            price: inputs.price,\n          },\n        }).catch(console.error);\n        console.log(res);\n      }}\n    >\n      <DisplayError error={error || updateError} />\n\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"Price\"\n            value={inputs.price}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n      </fieldset>\n\n      <button type=\"submit\">Update Product :></button>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}