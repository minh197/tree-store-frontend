{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/components/CreateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_PRODUCT_MUTATION(\\n    #which variables are getting passed in? And what types are they?\\n    $name: String!\\n    $description: String!\\n    $price: Int!\\n    $image: Upload\\n  ) {\\n    createProduct(\\n      data: {\\n        name: $name\\n        description: $description\\n        price: $price\\n        status: \\\"AVAILABLE\\\"\\n        photo: { create: { image: $image, altText: $name } }\\n      }\\n    ) {\\n      id\\n      price\\n      description\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products'; // Note for the photo\n// go ahead and create the photo but also create the item behind the scene\n\nvar CREATE_PRODUCT_MUTATION = gql(_templateObject());\nexport default function CreateProduct() {\n  _s();\n\n  // the way that hooking up state to a form input works is usually something like this\n  // react is very strict on one single source of truth\n  // if you have state in an input and you change that input\n  // you have your state in two places\n  // in react you need to listen to an on change input and when that happens\n  // you need to intercept what the user had typed and put in back to state\n  var _useForm = useForm({\n    image: '',\n    name: '',\n    price: 0,\n    description: ''\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm; // this is a function that is bound to this whole mutation\n  // and when we run it, it will go off to the back-end and runs it for us\n\n\n  var _useMutation = useMutation(CREATE_PRODUCT_MUTATION, {\n    variables: inputs,\n    // this is called refetching query\n    refetchQueries: [{\n      query: ALL_PRODUCTS_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error,\n      data = _useMutation2$.data;\n\n  return (\n    /*#__PURE__*/\n    // a field set is a way for you ro group multiple fields\n    _jsxDEV(Form, {\n      onSubmit: /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // stop the form from putting the info the url\n                  e.preventDefault();\n                  console.log(inputs); // submit the inputfields to the backend\n\n                  _context.next = 4;\n                  return createProduct();\n\n                case 4:\n                  res = _context.sent;\n                  clearForm(); // Go to that product's page\n\n                  Router.push({\n                    pathname: \"product/\".concat(res.data.createProduct.id)\n                  });\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: [\"Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"file\",\n            id: \"image\",\n            name: \"image\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Name\",\n            value: inputs.name,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"price\",\n            name: \"price\",\n            placeholder: \"Price\",\n            value: inputs.price,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Description\",\n            value: inputs.description,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create New Product :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(CreateProduct, \"RYAKW67IL5YWm7+bUw0UMSOGLYw=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = CreateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateProduct\");","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/components/CreateProduct.js"],"names":["useMutation","gql","Router","useForm","DisplayError","Form","ALL_PRODUCTS_QUERY","CREATE_PRODUCT_MUTATION","CreateProduct","image","name","price","description","inputs","handleChange","clearForm","resetForm","variables","refetchQueries","query","createProduct","loading","error","data","e","preventDefault","console","log","res","push","pathname","id"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\n// Note for the photo\n// go ahead and create the photo but also create the item behind the scene\nconst CREATE_PRODUCT_MUTATION = gql`\n  mutation CREATE_PRODUCT_MUTATION(\n    #which variables are getting passed in? And what types are they?\n    $name: String!\n    $description: String!\n    $price: Int!\n    $image: Upload\n  ) {\n    createProduct(\n      data: {\n        name: $name\n        description: $description\n        price: $price\n        status: \"AVAILABLE\"\n        photo: { create: { image: $image, altText: $name } }\n      }\n    ) {\n      id\n      price\n      description\n      name\n    }\n  }\n`;\n\nexport default function CreateProduct() {\n  // the way that hooking up state to a form input works is usually something like this\n  // react is very strict on one single source of truth\n  // if you have state in an input and you change that input\n  // you have your state in two places\n  // in react you need to listen to an on change input and when that happens\n  // you need to intercept what the user had typed and put in back to state\n  const { inputs, handleChange, clearForm, resetForm } = useForm({\n    image: '',\n    name: '',\n    price: 0,\n    description: '',\n  });\n  // this is a function that is bound to this whole mutation\n  // and when we run it, it will go off to the back-end and runs it for us\n  const [createProduct, { loading, error, data }] = useMutation(\n    CREATE_PRODUCT_MUTATION,\n    {\n      variables: inputs,\n      // this is called refetching query\n      refetchQueries: [{ query: ALL_PRODUCTS_QUERY }],\n    }\n  );\n  return (\n    // a field set is a way for you ro group multiple fields\n    <Form\n      onSubmit={async (e) => {\n        // stop the form from putting the info the url\n        e.preventDefault();\n        console.log(inputs);\n        // submit the inputfields to the backend\n        const res = await createProduct();\n        clearForm();\n        // Go to that product's page\n        Router.push({\n          pathname: `product/${res.data.createProduct.id}`,\n        });\n      }}\n    >\n      <DisplayError error={error} />\n\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"image\">\n          Image\n          <input\n            required\n            type=\"file\"\n            id=\"image\"\n            name=\"image\"\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"Price\"\n            value={inputs.price}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n      </fieldset>\n\n      <button type=\"submit\">Create New Product :)</button>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}