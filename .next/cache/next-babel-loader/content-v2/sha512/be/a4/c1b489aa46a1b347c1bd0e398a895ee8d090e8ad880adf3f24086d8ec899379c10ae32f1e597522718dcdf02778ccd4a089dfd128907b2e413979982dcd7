{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/components/Products.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS_QUERY {\\n    allProducts {\\n      id\\n      name\\n      price\\n      description\\n      photo {\\n        id\\n        image {\\n          publicUrlTransformed\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client'; // turn text into a graphql query\n\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Product from './Product';\nexport var ALL_PRODUCTS_QUERY = gql(_templateObject());\nvar ProductsListStyles = styled.div.withConfig({\n  displayName: \"Products__ProductsListStyles\",\n  componentId: \"sc-16nybhj-0\"\n})([\"display:grid;grid-template-columnns:1fr 1fr;grid-gap:60px;\"]);\n_c = ProductsListStyles;\nexport default function Products() {\n  _s();\n\n  var _this = this;\n\n  // usequery is a hook\n  var _useQuery = useQuery(ALL_PRODUCTS_QUERY),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  console.log(data, error, loading);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"error!! \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProductsListStyles, {\n      children: data.allProducts.map(function (product) {\n        return /*#__PURE__*/_jsxDEV(Product, {\n          product: product\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Products, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Products;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductsListStyles\");\n$RefreshReg$(_c2, \"Products\");","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/components/Products.js"],"names":["useQuery","gql","styled","Product","ALL_PRODUCTS_QUERY","ProductsListStyles","div","Products","data","error","loading","console","log","message","allProducts","map","product","id"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,IAAMC,kBAAkB,GAAGH,GAAH,mBAAxB;AAgBP,IAAMI,kBAAkB,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,kEAAxB;KAAMD,kB;AAKN,eAAe,SAASE,QAAT,GAAoB;AAAA;;AAAA;;AACjC;AADiC,kBAEAP,QAAQ,CAACI,kBAAD,CAFR;AAAA,MAEzBI,IAFyB,aAEzBA,IAFyB;AAAA,MAEnBC,KAFmB,aAEnBA,KAFmB;AAAA,MAEZC,OAFY,aAEZA,OAFY;;AAGjCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,KAAlB,EAAyBC,OAAzB;AACA,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,2BAAYA,KAAK,CAACI,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBACE;AAAA,2BACE,QAAC,kBAAD;AAAA,gBACGL,IAAI,CAACM,WAAL,CAAiBC,GAAjB,CAAqB,UAACC,OAAD;AAAA,4BACpB,QAAC,OAAD;AAA0B,UAAA,OAAO,EAAEA;AAAnC,WAAcA,OAAO,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,iBADoB;AAAA,OAArB;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAfuBV,Q;UAEWP,Q;;;MAFXO,Q","sourcesContent":["import { useQuery } from '@apollo/client';\n// turn text into a graphql query\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Product from './Product';\n\nexport const ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      name\n      price\n      description\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nconst ProductsListStyles = styled.div`\n  display: grid;\n  grid-template-columnns: 1fr 1fr;\n  grid-gap: 60px;\n`;\nexport default function Products() {\n  // usequery is a hook\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY);\n  console.log(data, error, loading);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>error!! {error.message}</p>;\n  return (\n    <div>\n      <ProductsListStyles>\n        {data.allProducts.map((product) => (\n          <Product key={product.id} product={product} />\n        ))}\n      </ProductsListStyles>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}