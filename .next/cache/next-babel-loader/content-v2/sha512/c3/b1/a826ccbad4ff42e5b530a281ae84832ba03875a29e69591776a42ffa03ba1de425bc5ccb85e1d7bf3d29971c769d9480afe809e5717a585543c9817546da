{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport { ApolloProvider } from '@apollo/client';\nimport Page from '../components/Page';\nimport withData from '../lib/withData';\nimport '../components/styles/nprogress.css'; // When Router event starts, it starts the nprogress\n\nRouter.events.on('routerChangeStart', () => NProgress.start()); // When Router event finishes, it starts the nprogress\n\nRouter.events.on('routerChangeComplete', () => NProgress.done());\nRouter.events.on('routerChangeError', () => NProgress.done()); // eslint-disable-next-line react/prop-types\n\nfunction MyApp({\n  Component,\n  pageProps,\n  apollo\n}) {\n  // console.log(apollo);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line react/jsx-no-comment-textnodes\n    // we need to wrap our entire application in what's called a provider\n    // a provider in react is a component that lives very high in our application\n    // it allows all the components that are several levels deep in order\n    // to access that data\n    // apollo client needs a client property\n    _jsxDEV(ApolloProvider, {\n      client: apollo,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)\n  );\n} // we need to tell next.js that it needs to go and fetch all of the queries in all of the children components\n// myApp.getinitial props is a specific nextjs thing\n// this is an async function\n// ctx = context\n// if any of the props have a getinitalprops method on them then we will wait and fetch them\n\n\nMyApp.getInitialProps = async function ({\n  Component,\n  ctx\n}) {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  pageProps.query = ctx.query; // this will allow us to get any query variables like /products/2\n\n  return {\n    pageProps\n  };\n}; // give me my app but inject the apollo client along inside of it\n\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/pages/_app.js"],"names":["NProgress","Router","ApolloProvider","Page","withData","events","on","start","done","MyApp","Component","pageProps","apollo","getInitialProps","ctx","query"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,oCAAP,C,CACA;;AACAH,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,mBAAjB,EAAsC,MAAMN,SAAS,CAACO,KAAV,EAA5C,E,CACA;;AACAN,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,sBAAjB,EAAyC,MAAMN,SAAS,CAACQ,IAAV,EAA/C;AACAP,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,mBAAjB,EAAsC,MAAMN,SAAS,CAACQ,IAAV,EAA5C,E,CAEA;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAf,EAAiD;AAC/C;AACA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA,YAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,MAAxB;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAaD,C,CACD;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACI,eAAN,GAAwB,gBAAgB;AAAEH,EAAAA,SAAF;AAAaI,EAAAA;AAAb,CAAhB,EAAoC;AAC1D,MAAIH,SAAS,GAAG,EAAhB;;AACA,MAAID,SAAS,CAACG,eAAd,EAA+B;AAC7BF,IAAAA,SAAS,GAAG,MAAMD,SAAS,CAACG,eAAV,CAA0BC,GAA1B,CAAlB;AACD;;AACDH,EAAAA,SAAS,CAACI,KAAV,GAAkBD,GAAG,CAACC,KAAtB,CAL0D,CAM1D;;AACA,SAAO;AAAEJ,IAAAA;AAAF,GAAP;AACD,CARD,C,CASA;;;AACA,eAAeP,QAAQ,CAACK,KAAD,CAAvB","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport { ApolloProvider } from '@apollo/client';\nimport Page from '../components/Page';\nimport withData from '../lib/withData';\nimport '../components/styles/nprogress.css';\n// When Router event starts, it starts the nprogress\nRouter.events.on('routerChangeStart', () => NProgress.start());\n// When Router event finishes, it starts the nprogress\nRouter.events.on('routerChangeComplete', () => NProgress.done());\nRouter.events.on('routerChangeError', () => NProgress.done());\n\n// eslint-disable-next-line react/prop-types\nfunction MyApp({ Component, pageProps, apollo }) {\n  // console.log(apollo);\n  return (\n    // eslint-disable-next-line react/jsx-no-comment-textnodes\n    // we need to wrap our entire application in what's called a provider\n    // a provider in react is a component that lives very high in our application\n    // it allows all the components that are several levels deep in order\n    // to access that data\n    // apollo client needs a client property\n    <ApolloProvider client={apollo}>\n      <Page>\n        <Component {...pageProps} />\n      </Page>\n    </ApolloProvider>\n  );\n}\n// we need to tell next.js that it needs to go and fetch all of the queries in all of the children components\n// myApp.getinitial props is a specific nextjs thing\n// this is an async function\n// ctx = context\n// if any of the props have a getinitalprops method on them then we will wait and fetch them\nMyApp.getInitialProps = async function ({ Component, ctx }) {\n  let pageProps = {};\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n  pageProps.query = ctx.query;\n  // this will allow us to get any query variables like /products/2\n  return { pageProps };\n};\n// give me my app but inject the apollo client along inside of it\nexport default withData(MyApp);\n"]},"metadata":{},"sourceType":"module"}