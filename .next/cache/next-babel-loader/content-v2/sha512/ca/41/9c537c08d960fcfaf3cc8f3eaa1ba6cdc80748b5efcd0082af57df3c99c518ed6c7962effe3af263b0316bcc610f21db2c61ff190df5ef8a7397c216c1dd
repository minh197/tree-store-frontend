{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/components/CreateProduct.js\";\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products'; // Note for the photo\n// go ahead and create the photo but also create the item behind the scene\n\nconst CREATE_PRODUCT_MUTATION = gql`\n  mutation CREATE_PRODUCT_MUTATION(\n    #which variables are getting passed in? And what types are they?\n    $name: String!\n    $description: String!\n    $price: Int!\n    $image: Upload\n  ) {\n    createProduct(\n      data: {\n        name: $name\n        description: $description\n        price: $price\n        status: \"AVAILABLE\"\n        photo: { create: { image: $image, altText: $name } }\n      }\n    ) {\n      id\n      price\n      description\n      name\n    }\n  }\n`;\nexport default function CreateProduct() {\n  // the way that hooking up state to a form input works is usually something like this\n  // react is very strict on one single source of truth\n  // if you have state in an input and you change that input\n  // you have your state in two places\n  // in react you need to listen to an on change input and when that happens\n  // you need to intercept what the user had typed and put in back to state\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm({\n    image: '',\n    name: '',\n    price: 0,\n    description: ''\n  }); // this is a function that is bound to this whole mutation\n  // and when we run it, it will go off to the back-end and runs it for us\n\n  const [createProduct, {\n    loading,\n    error,\n    data\n  }] = useMutation(CREATE_PRODUCT_MUTATION, {\n    variables: inputs,\n    // this is called refetching query\n    refetchQueries: [{\n      query: ALL_PRODUCTS_QUERY\n    }]\n  });\n  return (\n    /*#__PURE__*/\n    // a field set is a way for you ro group multiple fields\n    _jsxDEV(Form, {\n      onSubmit: async e => {\n        // stop the form from putting the info the url\n        e.preventDefault();\n        console.log(inputs); // submit the inputfields to the backend\n\n        const res = await createProduct();\n        clearForm(); // Go to that product's page\n\n        Router.push({\n          pathname: `product/${res.data.createProduct.id}`\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: [\"Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"file\",\n            id: \"image\",\n            name: \"image\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Name\",\n            value: inputs.name,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"price\",\n            name: \"price\",\n            placeholder: \"Price\",\n            value: inputs.price,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Description\",\n            value: inputs.description,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create New Product :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  );\n}","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/components/CreateProduct.js"],"names":["useMutation","gql","Router","useForm","DisplayError","Form","ALL_PRODUCTS_QUERY","CREATE_PRODUCT_MUTATION","CreateProduct","inputs","handleChange","clearForm","resetForm","image","name","price","description","createProduct","loading","error","data","variables","refetchQueries","query","e","preventDefault","console","log","res","push","pathname","id"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\n// Note for the photo\n// go ahead and create the photo but also create the item behind the scene\nconst CREATE_PRODUCT_MUTATION = gql`\n  mutation CREATE_PRODUCT_MUTATION(\n    #which variables are getting passed in? And what types are they?\n    $name: String!\n    $description: String!\n    $price: Int!\n    $image: Upload\n  ) {\n    createProduct(\n      data: {\n        name: $name\n        description: $description\n        price: $price\n        status: \"AVAILABLE\"\n        photo: { create: { image: $image, altText: $name } }\n      }\n    ) {\n      id\n      price\n      description\n      name\n    }\n  }\n`;\n\nexport default function CreateProduct() {\n  // the way that hooking up state to a form input works is usually something like this\n  // react is very strict on one single source of truth\n  // if you have state in an input and you change that input\n  // you have your state in two places\n  // in react you need to listen to an on change input and when that happens\n  // you need to intercept what the user had typed and put in back to state\n  const { inputs, handleChange, clearForm, resetForm } = useForm({\n    image: '',\n    name: '',\n    price: 0,\n    description: '',\n  });\n  // this is a function that is bound to this whole mutation\n  // and when we run it, it will go off to the back-end and runs it for us\n  const [createProduct, { loading, error, data }] = useMutation(\n    CREATE_PRODUCT_MUTATION,\n    {\n      variables: inputs,\n      // this is called refetching query\n      refetchQueries: [{ query: ALL_PRODUCTS_QUERY }],\n    }\n  );\n  return (\n    // a field set is a way for you ro group multiple fields\n    <Form\n      onSubmit={async (e) => {\n        // stop the form from putting the info the url\n        e.preventDefault();\n        console.log(inputs);\n        // submit the inputfields to the backend\n        const res = await createProduct();\n        clearForm();\n        // Go to that product's page\n        Router.push({\n          pathname: `product/${res.data.createProduct.id}`,\n        });\n      }}\n    >\n      <DisplayError error={error} />\n\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"image\">\n          Image\n          <input\n            required\n            type=\"file\"\n            id=\"image\"\n            name=\"image\"\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"Price\"\n            value={inputs.price}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n      </fieldset>\n\n      <button type=\"submit\">Create New Product :)</button>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}