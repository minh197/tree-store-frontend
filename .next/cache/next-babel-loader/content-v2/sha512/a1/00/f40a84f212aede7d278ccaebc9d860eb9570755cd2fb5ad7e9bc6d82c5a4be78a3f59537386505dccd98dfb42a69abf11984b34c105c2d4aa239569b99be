{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/gin411/tree-store/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gin411/tree-store/front-end/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport { ApolloProvider } from '@apollo/client';\nimport Page from '../components/Page';\nimport withData from '../lib/withData';\nimport '../components/styles/nprogress.css'; // When Router event starts, it starts the nprogress\n\nRouter.events.on('routerChangeStart', function () {\n  return NProgress.start();\n}); // When Router event finishes, it starts the nprogress\n\nRouter.events.on('routerChangeComplete', function () {\n  return NProgress.done();\n});\nRouter.events.on('routerChangeError', function () {\n  return NProgress.done();\n}); // eslint-disable-next-line react/prop-types\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      apollo = _ref.apollo;\n  // console.log(apollo);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line react/jsx-no-comment-textnodes\n    // we need to wrap our entire application in what's called a provider\n    // a provider in react is a component that lives very high in our application\n    // it allows all the components that are several levels deep in order\n    // to access that data\n    // apollo client needs a client property\n    _jsxDEV(ApolloProvider, {\n      client: apollo,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)\n  );\n} // we need to tell next.js that it needs to go and fetch all of the queries in all of the children components\n// myApp.getinitial props is a specific nextjs thing\n// this is an async function\n// ctx = context\n// if any of the props have a getinitalprops method on them then we will wait and fetch them\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var Component, ctx, pageProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref2.Component, ctx = _ref2.ctx;\n            pageProps = {};\n\n            if (!Component.getInitialProps) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return Component.getInitialProps(ctx);\n\n          case 5:\n            pageProps = _context.sent;\n\n          case 6:\n            pageProps.query = ctx.query; // this will allow us to get any query variables like /products/2\n\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // give me my app but inject the apollo client along inside of it\n\n\nexport default _c2 = withData(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/pages/_app.js"],"names":["NProgress","Router","ApolloProvider","Page","withData","events","on","start","done","MyApp","Component","pageProps","apollo","getInitialProps","ctx","query"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,oCAAP,C,CACA;;AACAH,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,mBAAjB,EAAsC;AAAA,SAAMN,SAAS,CAACO,KAAV,EAAN;AAAA,CAAtC,E,CACA;;AACAN,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,sBAAjB,EAAyC;AAAA,SAAMN,SAAS,CAACQ,IAAV,EAAN;AAAA,CAAzC;AACAP,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,mBAAjB,EAAsC;AAAA,SAAMN,SAAS,CAACQ,IAAV,EAAN;AAAA,CAAtC,E,CAEA;;AACA,SAASC,KAAT,OAAiD;AAAA,MAAhCC,SAAgC,QAAhCA,SAAgC;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAC/C;AACA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA,YAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,MAAxB;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAaD,C,CACD;AACA;AACA;AACA;AACA;;;KApBSF,K;;AAqBTA,KAAK,CAACI,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBH,YAAAA,SAAlB,SAAkBA,SAAlB,EAA6BI,GAA7B,SAA6BA,GAA7B;AAClBH,YAAAA,SADkB,GACN,EADM;;AAAA,iBAElBD,SAAS,CAACG,eAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGFH,SAAS,CAACG,eAAV,CAA0BC,GAA1B,CAHE;;AAAA;AAGpBH,YAAAA,SAHoB;;AAAA;AAKtBA,YAAAA,SAAS,CAACI,KAAV,GAAkBD,GAAG,CAACC,KAAtB,CALsB,CAMtB;;AANsB,6CAOf;AAAEJ,cAAAA,SAAS,EAATA;AAAF,aAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,I,CASA;;;AACA,qBAAeP,QAAQ,CAACK,KAAD,CAAvB","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport { ApolloProvider } from '@apollo/client';\nimport Page from '../components/Page';\nimport withData from '../lib/withData';\nimport '../components/styles/nprogress.css';\n// When Router event starts, it starts the nprogress\nRouter.events.on('routerChangeStart', () => NProgress.start());\n// When Router event finishes, it starts the nprogress\nRouter.events.on('routerChangeComplete', () => NProgress.done());\nRouter.events.on('routerChangeError', () => NProgress.done());\n\n// eslint-disable-next-line react/prop-types\nfunction MyApp({ Component, pageProps, apollo }) {\n  // console.log(apollo);\n  return (\n    // eslint-disable-next-line react/jsx-no-comment-textnodes\n    // we need to wrap our entire application in what's called a provider\n    // a provider in react is a component that lives very high in our application\n    // it allows all the components that are several levels deep in order\n    // to access that data\n    // apollo client needs a client property\n    <ApolloProvider client={apollo}>\n      <Page>\n        <Component {...pageProps} />\n      </Page>\n    </ApolloProvider>\n  );\n}\n// we need to tell next.js that it needs to go and fetch all of the queries in all of the children components\n// myApp.getinitial props is a specific nextjs thing\n// this is an async function\n// ctx = context\n// if any of the props have a getinitalprops method on them then we will wait and fetch them\nMyApp.getInitialProps = async function ({ Component, ctx }) {\n  let pageProps = {};\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n  pageProps.query = ctx.query;\n  // this will allow us to get any query variables like /products/2\n  return { pageProps };\n};\n// give me my app but inject the apollo client along inside of it\nexport default withData(MyApp);\n"]},"metadata":{},"sourceType":"module"}