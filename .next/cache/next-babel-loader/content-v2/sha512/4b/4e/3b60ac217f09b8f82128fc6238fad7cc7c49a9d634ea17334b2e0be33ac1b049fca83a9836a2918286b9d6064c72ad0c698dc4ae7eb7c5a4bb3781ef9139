{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  // state gonna be object with mutiple fields\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  const initialValues = Object.values(initial).join('');\n  useEffect(() => {\n    // this function runs when the things when we watching change\n    setInputs(initial);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      // give me the first thing out of the e.target.files array and stick that thing to our value\n      [value] = e.target.files;\n    } // set the first item of the array to be the file\n\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  } // how do you take an object and loop over all the properties\n  // and set them to be nothing\n  // use Object.fromEntries to turn the array to object\n  // essentailly, we turn it into an array, map over it set the value to null on each\n  // and we turn it back to an object\n\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  } // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/gin411/tree-store/front-end/lib/useForm.js"],"names":["useEffect","useState","useForm","initial","inputs","setInputs","initialValues","Object","values","join","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;AACA,QAAMG,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAtB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACAK,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAHQ,EAGN,CAACG,aAAD,CAHM,CAAT;;AAKA,WAASI,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACD;;AACD,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnB;AACA,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACD,KARsB,CASvB;;;AAEAZ,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACS,IAAD,GAAQD;AAHD,OAAT;AAKD;;AACD,WAASM,SAAT,GAAqB;AACnBb,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GA9B2C,CA+B5C;AACA;AACA;AACA;AACA;;;AAEA,WAASgB,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGb,MAAM,CAACc,WAAP,CACjBd,MAAM,CAACe,OAAP,CAAelB,MAAf,EAAuBmB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,CAACY,GAAD,EAAM,EAAN,CAA7C,CADiB,CAAnB;AAGAnB,IAAAA,SAAS,CAACe,UAAD,CAAT;AACD,GA1C2C,CA2C5C;;;AACA,SAAO;AACLhB,IAAAA,MADK;AAELM,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  // state gonna be object with mutiple fields\n  const [inputs, setInputs] = useState(initial);\n  const initialValues = Object.values(initial).join('');\n\n  useEffect(() => {\n    // this function runs when the things when we watching change\n    setInputs(initial);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let { value, name, type } = e.target;\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n    if (type === 'file') {\n      // give me the first thing out of the e.target.files array and stick that thing to our value\n      [value] = e.target.files;\n    }\n    // set the first item of the array to be the file\n\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n  function resetForm() {\n    setInputs(initial);\n  }\n  // how do you take an object and loop over all the properties\n  // and set them to be nothing\n  // use Object.fromEntries to turn the array to object\n  // essentailly, we turn it into an array, map over it set the value to null on each\n  // and we turn it back to an object\n\n  function clearForm() {\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => [key, ''])\n    );\n    setInputs(blankState);\n  }\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}